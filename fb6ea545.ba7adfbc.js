(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{284:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return c}));var r=t(1),a=t(9),i=(t(0),t(290)),o={title:"Defining Entities"},l=[{value:"Optional Properties",id:"optional-properties",children:[]},{value:"Enums",id:"enums",children:[]},{value:"Virtual Properties",id:"virtual-properties",children:[]},{value:"Entity file names",id:"entity-file-names",children:[]},{value:"Using BaseEntity",id:"using-baseentity",children:[]},{value:"Examples of entity definition with various primary keys",id:"examples-of-entity-definition-with-various-primary-keys",children:[{value:"Using id as primary key (SQL drivers)",id:"using-id-as-primary-key-sql-drivers",children:[]},{value:"Using UUID as primary key (SQL drivers)",id:"using-uuid-as-primary-key-sql-drivers",children:[]},{value:"Example of Mongo entity",id:"example-of-mongo-entity",children:[]},{value:"Using WrappedEntity interface",id:"using-wrappedentity-interface",children:[]}]}],s={rightToc:l},p="wrapper";function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)(p,Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Entities are simple javascript objects (so called POJO), decorated with ",Object(i.b)("inlineCode",{parentName:"p"},"@Entity")," decorator.\nNo real restrictions are made, you do not have to extend any base class, you are more than welcome\nto ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/entity-constructors"}),"use entity constructors"),", just do not forget to specify primary key with\n",Object(i.b)("inlineCode",{parentName:"p"},"@PrimaryKey")," decorator."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"./entities/Book.ts"))),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book implements IdEntity<Book> {\n\n  @PrimaryKey()\n  id!: number;\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n  @Property()\n  title!: string;\n\n  @ManyToOne() // when you provide correct type hint, ORM will read it for you\n  author!: Author;\n\n  @ManyToOne(() => Publisher) // or you can specify the entity as class reference or string name\n  publisher?: Publisher;\n\n  @ManyToMany() // owning side can be simple as this!\n  tags = new Collection<BookTag>(this);\n\n  constructor(title: string, author: Author) {\n    this.title = title;\n    this.author = author;\n  }\n\n}\n")),Object(i.b)("p",null,"You will need to mark the entity by implementing one of ",Object(i.b)("inlineCode",{parentName:"p"},"*Entity")," interfaces:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"IdEntity<T>")," for numeric/string PK on ",Object(i.b)("inlineCode",{parentName:"li"},"id")," property (",Object(i.b)("inlineCode",{parentName:"li"},"id: number"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"UuidEntity<T>")," for string PK on ",Object(i.b)("inlineCode",{parentName:"li"},"uuid")," property (",Object(i.b)("inlineCode",{parentName:"li"},"uuid: string"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"MongoEntity<T>")," for mongo, where ",Object(i.b)("inlineCode",{parentName:"li"},"id: string")," and ",Object(i.b)("inlineCode",{parentName:"li"},"_id: ObjectId")," are required"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AnyEntity<T, PK>")," for other possible properties (fill the PK property name to ",Object(i.b)("inlineCode",{parentName:"li"},"PK"),"\nparameter, e.g.: ",Object(i.b)("inlineCode",{parentName:"li"},"AnyEntity<Book, 'myPrimaryProperty'>'"),")")),Object(i.b)("p",null,"As you can see, entity properties are decorated either with ",Object(i.b)("inlineCode",{parentName:"p"},"@Property")," decorator, or with one\nof reference decorators: ",Object(i.b)("inlineCode",{parentName:"p"},"@ManyToOne"),", ",Object(i.b)("inlineCode",{parentName:"p"},"@OneToMany"),", ",Object(i.b)("inlineCode",{parentName:"p"},"@OneToOne")," and ",Object(i.b)("inlineCode",{parentName:"p"},"@ManyToMany"),". "),Object(i.b)("p",null,"Here is another example of ",Object(i.b)("inlineCode",{parentName:"p"},"Author")," entity, that was referenced from the ",Object(i.b)("inlineCode",{parentName:"p"},"Book")," one, this\ntime defined for mongo:"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"./entities/Author.ts"))),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Author implements MongoEntity<Author> {\n\n  @PrimaryKey()\n  _id!: ObjectId;\n\n  @SerializedPrimaryKey()\n  id!: string;\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n  @Property()\n  name!: string;\n\n  @Property()\n  email!: string;\n\n  @Property()\n  age?: number;\n\n  @Property()\n  termsAccepted = false;\n\n  @Property()\n  identities?: string[];\n\n  @Property()\n  born?: Date;\n\n  @OneToMany(() => Book, book => book.author)\n  books = new Collection<Book>(this);\n\n  @ManyToMany()\n  friends = new Collection<Author>(this);\n\n  @ManyToOne()\n  favouriteBook?: Book;\n\n  @Property({ version: true })\n  version!: number;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n}\n")),Object(i.b)("p",null,"More information about modelling relationships can be found on ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/relationships"}),"modelling relationships page"),"."),Object(i.b)("p",null,"If you want to define your entity in Vanilla JavaScript, take a look ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/usage-with-js"}),"here"),"."),Object(i.b)("h3",{id:"optional-properties"},"Optional Properties"),Object(i.b)("p",null,"When you define the property as optional (marked with ",Object(i.b)("inlineCode",{parentName:"p"},"?"),"), this will be automatically considered\nas nullable property (mainly for SQL schema generator). "),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"This auto-detection works only when you omit the ",Object(i.b)("inlineCode",{parentName:"p"},"type"),"/",Object(i.b)("inlineCode",{parentName:"p"},"entity")," attribute.")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@ManyToOne()\nfavouriteBook?: Book; // correct: no `type` or `entity` provided, **will** be marked as `nullable`\n\n@ManyToOne(() => Book, { nullable: true })\nfavouriteBook?: Book; // correct, `entity` provided and explicitly marked as `nullable`\n\n@ManyToOne(() => Book)\nfavouriteBook?: Book; // wrong, not marked as `nullable`\n")),Object(i.b)("h3",{id:"enums"},"Enums"),Object(i.b)("p",null,"To define enum property, use ",Object(i.b)("inlineCode",{parentName:"p"},"@Enum()")," decorator. Enums can be either numeric or string valued. "),Object(i.b)("p",null,"For schema generator to work properly in case of string enums, you need to define the enum\nis same file as where it is used, so its values can be automatically discovered. If you want\nto define the enum in another file, you should reexport it also in place where you use it. "),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can also set enum items manually via ",Object(i.b)("inlineCode",{parentName:"p"},"items: string[]")," attribute.  ")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class User implements IdEntity<User> {\n\n  @Enum()\n  role!: UserRole; // string enum\n\n  @Enum()\n  status!: UserStatus; // numeric enum\n\n}\n\nexport enum UserRole {\n  ADMIN = 'admin',\n  MODERATOR = 'moderator',\n  USER = 'user',\n}\n\nexport const enum UserStatus {\n  DISABLED,\n  ACTIVE,\n}\n")),Object(i.b)("h2",{id:"virtual-properties"},"Virtual Properties"),Object(i.b)("p",null,"You can define your properties as virtual, either as a method, or via JavaScript ",Object(i.b)("inlineCode",{parentName:"p"},"get/set"),"."),Object(i.b)("p",null,"Following example defines User entity with ",Object(i.b)("inlineCode",{parentName:"p"},"firstName")," and ",Object(i.b)("inlineCode",{parentName:"p"},"lastName")," database fields, that\nare both hidden from the serialized response, replaced with virtual properties ",Object(i.b)("inlineCode",{parentName:"p"},"fullName"),"\n(defined as a classic method) and ",Object(i.b)("inlineCode",{parentName:"p"},"fullName2")," (defined as a JavaScript getter)."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"For JavaScript getter you need to provide ",Object(i.b)("inlineCode",{parentName:"p"},"{ persist: false }")," option otherwise the value\nwould be stored in the database. ")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class User implements IdEntity<User> {\n\n  @Property({ hidden: true })\n  firstName!: string;\n\n  @Property({ hidden: true })\n  lastName!: string;\n\n  @Property({ name: 'fullName' })\n  getFullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  @Property({ persist: false })\n  get fullName2() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n}\n\nconst repo = orm.em.getRepository(User);\nconst author = repo.create({ firstName: 'Jon', lastName: 'Snow' });\n\nconsole.log(author.getFullName()); // 'Jon Snow'\nconsole.log(author.fullName2); // 'Jon Snow'\nconsole.log(author.toJSON()); // { fullName: 'Jon Snow', fullName2: 'Jon Snow' }\n")),Object(i.b)("h2",{id:"entity-file-names"},"Entity file names"),Object(i.b)("p",null,"You are free to choose one of those formats for entity filename (for a ",Object(i.b)("inlineCode",{parentName:"p"},"BookTag")," entity):"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BookTag.ts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"BookTag.model.ts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"book-tag.ts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"book-tag.model.ts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"book-tag.entity.ts"))),Object(i.b)("p",null,"Entity name is inferred from the first part of file name before first dot occurs, so you can\nadd any suffix behind the dot, not just ",Object(i.b)("inlineCode",{parentName:"p"},".model.ts")," or ",Object(i.b)("inlineCode",{parentName:"p"},".entity.ts"),". "),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can change this behaviour by defining custom ",Object(i.b)("inlineCode",{parentName:"p"},"NamingStrategy.getClassName()")," method.")),Object(i.b)("h2",{id:"using-baseentity"},"Using BaseEntity"),Object(i.b)("p",null,"You can define your own base entity with properties that you require on all entities, like\nprimary key and created/updated time. "),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If you are initializing the ORM via ",Object(i.b)("inlineCode",{parentName:"p"},"entities")," option, you need to specify all your\nbase entities as well.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"./entities/BaseEntity.ts"))),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { v4 } from 'uuid';\n\nexport abstract class BaseEntity implements UuidEntity<BaseEntity> {\n\n  @PrimaryKey()\n  uuid = v4();\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n}\n")),Object(i.b)("h2",{id:"examples-of-entity-definition-with-various-primary-keys"},"Examples of entity definition with various primary keys"),Object(i.b)("h3",{id:"using-id-as-primary-key-sql-drivers"},"Using id as primary key (SQL drivers)"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book implements IdEntity<Book> {\n\n  @PrimaryKey()\n  id!: number; // string is also supported\n\n  @Property()\n  title!: string;\n\n  @ManyToOne()\n  author!: Author;\n\n}\n")),Object(i.b)("h3",{id:"using-uuid-as-primary-key-sql-drivers"},"Using UUID as primary key (SQL drivers)"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { v4 } from 'uuid';\n\n@Entity()\nexport class Book implements UuidEntity<Book> {\n\n  @PrimaryKey()\n  uuid = v4();\n\n  @Property()\n  title!: string;\n\n  @ManyToOne()\n  author!: Author;\n\n}\n")),Object(i.b)("h3",{id:"example-of-mongo-entity"},"Example of Mongo entity"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book implements MongoEntity<Book> {\n\n  @PrimaryKey()\n  _id!: ObjectId;\n\n  @SerializedPrimaryKey() \n  id!: string; // string variant of PK, will be handled automatically\n\n  @Property()\n  title!: string;\n\n  @ManyToOne()\n  author!: Author;\n\n}\n")),Object(i.b)("h3",{id:"using-wrappedentity-interface"},"Using WrappedEntity interface"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book {\n\n  @PrimaryKey()\n  id!: number;\n\n  @Property()\n  title!: string;\n\n  @ManyToOne()\n  author!: Author;\n\n}\n\nexport interface Book extends WrappedEntity<Book, 'id'> { };\n")),Object(i.b)("p",null,"With your entities set up, you can start ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/entity-manager"}),"using entity manager")," and\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/repositories"}),"repositories")," as described in following sections. "))}c.isMDXComponent=!0},290:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r),i=a.a.createContext({}),o=function(e){var n=a.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=o(e.components);return a.a.createElement(i.Provider,{value:n},e.children)};var s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},c=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),c=o(t),b=r,u=c[l+"."+b]||c[b]||p[b]||i;return t?a.a.createElement(u,Object.assign({},{ref:n},s,{components:t})):a.a.createElement(u,Object.assign({},{ref:n},s))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var b=2;b<i;b++)o[b]=t[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);