(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{266:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(1),o=n(9),a=(n(0),n(292)),i={title:"Installation & Usage"},s=[{value:"Entity discovery in TypeScript",id:"entity-discovery-in-typescript",children:[]},{value:"Request context",id:"request-context",children:[]}],c={rightToc:s},p="wrapper";function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)(p,Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"First install the module via ",Object(a.b)("inlineCode",{parentName:"p"},"yarn")," or ",Object(a.b)("inlineCode",{parentName:"p"},"npm")," and do not forget to install the database driver as well:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ yarn add mikro-orm mongodb # for mongo\n$ yarn add mikro-orm mysql2  # for mysql\n$ yarn add mikro-orm pg      # for postgresql\n$ yarn add mikro-orm sqlite  # for sqlite\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"$ npm i -s mikro-orm mongodb # for mongo\n$ npm i -s mikro-orm mysql2  # for mysql\n$ npm i -s mikro-orm pg      # for postgresql\n$ npm i -s mikro-orm sqlite  # for sqlite\n")),Object(a.b)("p",null,"Next you will need to enable support for ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/decorators.html"}),"decorators"),"\nin ",Object(a.b)("inlineCode",{parentName:"p"},"tsconfig.json")," via:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"experimentalDecorators": true\n')),Object(a.b)("p",null,"Then call ",Object(a.b)("inlineCode",{parentName:"p"},"MikroORM.init")," as part of bootstrapping your app:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const orm = await MikroORM.init({\n  entities: [Author, Book, BookTag],\n  dbName: 'my-db-name',\n  clientUrl: '...', // defaults to 'mongodb://localhost:27017' for mongodb driver\n  baseDir: __dirname, // defaults to `process.cwd()`\n  autoFlush: false, // read more here: https://mikro-orm.io/unit-of-work/\n});\nconsole.log(orm.em); // access EntityManager via `em` property\n")),Object(a.b)("p",null,"You can also provide paths where you store your entities via ",Object(a.b)("inlineCode",{parentName:"p"},"entitiesDirs")," array. Internally\nit uses ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/sindresorhus/globby"}),Object(a.b)("inlineCode",{parentName:"a"},"globby"))," so you can use\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/sindresorhus/globby#globbing-patterns"}),"globbing patterns"),". "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const orm = await MikroORM.init({\n  entitiesDirs: ['./dist/app/**/entities'],\n  // ...\n});\n")),Object(a.b)("p",null,"You should provide list of directories, not paths to entities directly. If you want to do that\ninstead, you should use ",Object(a.b)("inlineCode",{parentName:"p"},"entities")," array and use ",Object(a.b)("inlineCode",{parentName:"p"},"globby")," manually:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { sync } from 'globby';\n\nconst orm = await MikroORM.init({\n  entities: sync('./dist/app/**/entities/*.js').map(require),\n  // ...\n});\n")),Object(a.b)("h2",{id:"entity-discovery-in-typescript"},"Entity discovery in TypeScript"),Object(a.b)("p",null,"Internally, ",Object(a.b)("inlineCode",{parentName:"p"},"MikroORM")," uses ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/v2/metadata-cache"}),"performs analysis")," of source files of entities\nto sniff types of all properties. This process can be slow if your project contains lots of\nfiles. To speed up the discovery process a bit, you can provide more accurate paths where your\nentity source files are: "),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const orm = await MikroORM.init({\n  entitiesDirs: ['./dist/entities'], // path to your JS entities (dist), relative to `baseDir`\n  entitiesDirsTs: ['./src/entities'], // path to your TS entities (source), relative to `baseDir`\n  // ...\n});\n")),Object(a.b)("h2",{id:"request-context"},"Request context"),Object(a.b)("p",null,"Then you will need to fork entity manager for each request so their identity maps will not\ncollide. To do so, use the ",Object(a.b)("inlineCode",{parentName:"p"},"RequestContext")," helper:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const app = express();\n\napp.use((req, res, next) => {\n  RequestContext.create(orm.em, next);\n});\n")),Object(a.b)("p",null,"More info about ",Object(a.b)("inlineCode",{parentName:"p"},"RequestContext")," is described ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/v2/identity-map#request-context"}),"here"),"."),Object(a.b)("p",null,"Now you can start ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/v2/defining-entities"}),"defining your entities")," (in one of the ",Object(a.b)("inlineCode",{parentName:"p"},"entitiesDirs")," folders)."),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/v2/index#table-of-contents"}),"\u2190"," Back to table of contents")))}l.isMDXComponent=!0},292:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r),a=o.a.createContext({}),i=function(e){var t=o.a.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},s=function(e){var t=i(e.components);return o.a.createElement(a.Provider,{value:t},e.children)};var c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},l=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),l=i(n),b=r,u=l[s+"."+b]||l[b]||p[b]||a;return n?o.a.createElement(u,Object.assign({},{ref:t},c,{components:n})):o.a.createElement(u,Object.assign({},{ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=l;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var b=2;b<a;b++)i[b]=n[b];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}l.displayName="MDXCreateElement"}}]);