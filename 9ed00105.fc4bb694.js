(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{232:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(1),i=n(9),r=(n(0),n(290)),o={title:"Advanced Configuration"},l=[{value:"Entity Discovery",id:"entity-discovery",children:[]},{value:"Driver",id:"driver",children:[]},{value:"Connection",id:"connection",children:[]},{value:"Auto-flush",id:"auto-flush",children:[]},{value:"Naming Strategy",id:"naming-strategy",children:[]},{value:"Auto-join of 1:1 owners",id:"auto-join-of-11-owners",children:[]},{value:"Forcing UTC Timezone",id:"forcing-utc-timezone",children:[]},{value:"Custom Hydrator",id:"custom-hydrator",children:[]},{value:"Custom Repository",id:"custom-repository",children:[]},{value:"Strict Mode",id:"strict-mode",children:[]},{value:"Debugging & Logging",id:"debugging--logging",children:[]},{value:"Custom Fail Handler",id:"custom-fail-handler",children:[]},{value:"Migrations",id:"migrations",children:[]},{value:"Caching",id:"caching",children:[]}],c={rightToc:l},b="wrapper";function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(b,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"entity-discovery"},"Entity Discovery"),Object(r.b)("p",null,"You can either provide array of entity instances via ",Object(r.b)("inlineCode",{parentName:"p"},"entities"),", or let the ORM look up your\nentities in selected folders. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  entities: [Author, Book, Publisher, BookTag],\n});\n")),Object(r.b)("p",null,"When using ",Object(r.b)("inlineCode",{parentName:"p"},"entitiesDirs"),", you can optionally provide also set of directories with TS source files,\nthat will be used to look up missing types (see more at ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/metadata-providers"}),"Metadata Providers"),")."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"entitiesDirsTs")," option is used only with the default ",Object(r.b)("inlineCode",{parentName:"p"},"TsMorphMetadataProvider"),". By default, all your\nsource files will be scanned, based on your ",Object(r.b)("inlineCode",{parentName:"p"},"tsconfig.json"),". ")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  entitiesDirs: ['./dist/modules/users/entities', './dist/modules/projects/entities'],\n  // optional, more specific paths will speed up the discovery\n  entitiesDirsTs: ['./src/modules/users/entities', './src/modules/projects/entities'],\n  // optionally you can override the base directory (defaults to `process.cwd()`)\n  baseDir: __dirname + '/..',\n});\n")),Object(r.b)("p",null,"By default, ",Object(r.b)("inlineCode",{parentName:"p"},"TsMorphMetadataProvider")," is used that analyses your entity source files. You can\nuse ",Object(r.b)("inlineCode",{parentName:"p"},"ReflectMetadataProvider")," if you do not want the source file analyses to happen.\nIf you aim to use plain JavaScript instead of TypeScript, use the ",Object(r.b)("inlineCode",{parentName:"p"},"JavaScriptMetadataProvider"),"."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"You can also implement your own metadata provider and use it instead. To do so, extend the\n",Object(r.b)("inlineCode",{parentName:"p"},"MetadataProvider")," class.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  metadataProvider: ReflectMetadataProvider,\n});\n")),Object(r.b)("p",null,"There are also some additional options how you can adjust the discovery process:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  discovery: {\n    warnWhenNoEntities: false, // by default, discovery throws when no entity is processed\n    requireEntitiesArray: true, // force usage of `entities` instead of `entitiesDirs`\n    \n    // you can explicitly specify the path to your tsconfig.json (used only when `entitiesDirsTs` is not provided)\n    tsConfigPath: string,\n  },\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/metadata-providers"}),"Metadata Providers")," sections."),Object(r.b)("h2",{id:"driver"},"Driver"),Object(r.b)("p",null,"To select driver, you can either use ",Object(r.b)("inlineCode",{parentName:"p"},"type")," option, or provide the driver class reference."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"driver name"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"dependency"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"note"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mongo")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"MongoDriver")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mongodb^3.3.4")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"default driver")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mysql")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"MySqlDriver")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mysql2^2.0.0")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"compatible with MariaDB")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mariadb")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"MariaDbDriver")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mariadb^2.0.0")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"compatible with MySQL")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"postgresql")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"PostgreSqlDriver")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"pg^7.0.0")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"-")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"sqlite")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"SqliteDriver")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"sqlite3^4.0.0")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"-")))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Driver and connection implementations are not directly exported from ",Object(r.b)("inlineCode",{parentName:"p"},"mikro-orm")," module.\nYou can import them from ",Object(r.b)("inlineCode",{parentName:"p"},"mikro-orm/dist/drivers"),".")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"You can pass additional options to the underlying driver (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"mysql2"),") via ",Object(r.b)("inlineCode",{parentName:"p"},"driverOptions"),".\nThe object will be deeply merged, overriding all internally used options.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import { MySqlDriver } from 'mikro-orm/dist/drivers/MySqlDriver';\n\nMikroORM.init({\n  driver: MySqlDriver,\n  driverOptions: { timezone: '+02:00' },\n});\n")),Object(r.b)("h2",{id:"connection"},"Connection"),Object(r.b)("p",null,"Each platform (driver) provides default connection string, you can override it as a whole\nthrough ",Object(r.b)("inlineCode",{parentName:"p"},"clientUrl"),", or partially through one of following options:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export interface ConnectionOptions {\n  dbName: string;\n  name?: string; // for logging only (when replicas are used)\n  clientUrl?: string;\n  host?: string;\n  port?: number;\n  user?: string;\n  password?: string;\n  multipleStatements?: boolean; // for mysql driver\n  pool?: PoolConfig; // provided by `knex`\n}\n")),Object(r.b)("p",null,"Following table shows default client connection strings:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"default connection url"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mongo")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mongodb://127.0.0.1:27017"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mysql")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mysql://root@127.0.0.1:3306"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mariadb")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"mysql://root@127.0.0.1:3306"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"postgresql")),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"postgresql://postgres@127.0.0.1:5432"))))),Object(r.b)("p",null,"To set up read replicas, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"replicas")," option. You can provide only those parts of the\n",Object(r.b)("inlineCode",{parentName:"p"},"ConnectionOptions")," interface, they will be used to override the ",Object(r.b)("inlineCode",{parentName:"p"},"master")," connection options."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  type: 'mysql',\n  dbName: 'my_db_name',\n  user: 'write-user',\n  host: 'master.db.example.com',\n  port: 3306,\n  replicas: [\n    { user: 'read-user-1', host: 'read-1.db.example.com', port: 3307 },\n    { user: 'read-user-2', host: 'read-2.db.example.com', port: 3308 },\n    { user: 'read-user-3', host: 'read-3.db.example.com', port: 3309 },\n  ],\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/installation"}),"Installation")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/read-connections"}),"Read Connections")," sections."),Object(r.b)("h2",{id:"auto-flush"},"Auto-flush"),Object(r.b)("p",null,"Since MikroORM v3, default value for ",Object(r.b)("inlineCode",{parentName:"p"},"autoFlush")," is ",Object(r.b)("inlineCode",{parentName:"p"},"false"),". That means you need to call\n",Object(r.b)("inlineCode",{parentName:"p"},"em.flush()")," yourself to persist changes into database. You can still change this via ORM's\noptions to ease the transition but generally it is not recommended as it can cause unwanted\nsmall transactions being created around each ",Object(r.b)("inlineCode",{parentName:"p"},"persist"),". "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  autoFlush: true,\n});\n\nawait orm.em.persist(new Entity()); // flushed\norm.em.persist(new Entity(), false); // you can still use second parameter to disable auto-flushing\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/entity-manager#auto-flushing"}),"Entity Manager")," docs."),Object(r.b)("h2",{id:"naming-strategy"},"Naming Strategy"),Object(r.b)("p",null,"When mapping your entities to database tables and columns, their names will be defined by naming\nstrategy. There are 3 basic naming strategies you can choose from:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"UnderscoreNamingStrategy")," - default of all SQL drivers"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MongoNamingStrategy")," - default of ",Object(r.b)("inlineCode",{parentName:"li"},"MongoDriver")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"EntityCaseNamingStrategy")," - uses unchanged entity and property names")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"You can also define your own custom ",Object(r.b)("inlineCode",{parentName:"p"},"NamingStrategy")," implementation.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  namingStrategy: EntityCaseNamingStrategy,\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/naming-strategy"}),"Naming Strategy")," section."),Object(r.b)("h2",{id:"auto-join-of-11-owners"},"Auto-join of 1:1 owners"),Object(r.b)("p",null,"By default, owning side of 1:1 relation will be auto-joined when you select the inverse side\nso we can have the reference to it. You can disable this behaviour via ",Object(r.b)("inlineCode",{parentName:"p"},"autoJoinOneToOneOwner"),"\nconfiguration toggle."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  autoJoinOneToOneOwner: false,\n});\n")),Object(r.b)("h2",{id:"forcing-utc-timezone"},"Forcing UTC Timezone"),Object(r.b)("p",null,"Use ",Object(r.b)("inlineCode",{parentName:"p"},"forceUtcTimezone")," option to force the ",Object(r.b)("inlineCode",{parentName:"p"},"Date"),"s to be saved in UTC in datetime columns\nwithout timezone. It works for MySQL (",Object(r.b)("inlineCode",{parentName:"p"},"datetime")," type) and PostgreSQL (",Object(r.b)("inlineCode",{parentName:"p"},"timestamp")," type).\nSQLite does this by default. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  forceUtcTimezone: true,\n});\n")),Object(r.b)("h2",{id:"custom-hydrator"},"Custom Hydrator"),Object(r.b)("p",null,"Hydrator is responsible for assigning values from the database to entities.\nYou can implement your custom ",Object(r.b)("inlineCode",{parentName:"p"},"Hydrator")," (by extending the abstract ",Object(r.b)("inlineCode",{parentName:"p"},"Hydrator")," class):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  hydrator: MyCustomHydrator,\n});\n")),Object(r.b)("h2",{id:"custom-repository"},"Custom Repository"),Object(r.b)("p",null,"You can also register custom base repository (for all entities where you do not specify\n",Object(r.b)("inlineCode",{parentName:"p"},"customRepository"),") globally:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"You can still use entity specific repositories in combination with global base repository.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  entityRepository: CustomBaseRepository,\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/repositories"}),"Repositories")," section."),Object(r.b)("h2",{id:"strict-mode"},"Strict Mode"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"MirkoORM")," will validate your properties before actual persisting happens. It will try to fix wrong\ndata types for you automatically. If automatic conversion fails, it will throw an error. You can\nenable strict mode to disable this feature and let ORM throw errors instead. Validation is triggered\nwhen persisting the entity. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  strict: true,\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/property-validation"}),"Property Validation")," section."),Object(r.b)("h2",{id:"debugging--logging"},"Debugging & Logging"),Object(r.b)("p",null,"You can enable logging with ",Object(r.b)("inlineCode",{parentName:"p"},"debug")," option. Either set it to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," to log everything, or\nprovide array of ",Object(r.b)("inlineCode",{parentName:"p"},"'query' | 'query-params' | 'discovery' | 'info'")," namespaces."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  logger: (message: string) => myLogger.info(message), // defaults to `console.log()`\n  debug: true, // or provide array like `['query', 'query-params']`\n  highlight: false, // defaults to true\n  highlightTheme: { ... }, // you can also provide custom highlight there\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/debugging"}),"Debugging")," section."),Object(r.b)("h2",{id:"custom-fail-handler"},"Custom Fail Handler"),Object(r.b)("p",null,"When no entity is found during ",Object(r.b)("inlineCode",{parentName:"p"},"em.findOneOrFail()")," call, ",Object(r.b)("inlineCode",{parentName:"p"},"new Error()")," will be thrown.\nYou can customize how the ",Object(r.b)("inlineCode",{parentName:"p"},"Error")," instance is created via ",Object(r.b)("inlineCode",{parentName:"p"},"findOneOrFailHandler"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  findOneOrFailHandler: (entityName: string, where: Dictionary | IPrimaryKey) => {\n    return new NotFoundException(`${entityName} not found!`);\n  },\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/entity-manager#handling-not-found-entities"}),"Entity Manager")," docs."),Object(r.b)("h2",{id:"migrations"},"Migrations"),Object(r.b)("p",null,"Under the ",Object(r.b)("inlineCode",{parentName:"p"},"migrations")," namespace, you can adjust how the integrated migrations support works.\nFollowing example shows all possible options and their defaults:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  migrations: {\n    tableName: 'mikro_orm_migrations', // migrations table name\n    path: process.cwd() + '/migrations', // path to folder with migration files\n    pattern: /^[\\w-]+\\d+\\.ts$/, // how to match migration files\n    transactional: true, // run each migration inside transaction\n    disableForeignKeys: true, // try to disable foreign_key_checks (or equivalent)\n    allOrNothing: true, // run all migrations in current batch in master transaction\n  },\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/migrations"}),"Migrations")," section."),Object(r.b)("h2",{id:"caching"},"Caching"),Object(r.b)("p",null,"By default, metadata discovery results are cached. You can either disable caching, or adjust\nhow it works. Following example shows all possible options and their defaults:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"MikroORM.init({\n  cache: {\n    enabled: true,\n    pretty: false, // allows to pretty print the JSON cache\n    adapter: FileCacheAdapter, // you can provide your own implementation here, e.g. with redis\n    options: { cacheDir: process.cwd() + '/temp' }, // options will be passed to the constructor of `adapter` class\n  },\n});\n")),Object(r.b)("p",null,"Read more about this in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/metadata-cache"}),"Metadata Cache")," section."))}s.isMDXComponent=!0},290:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return p}));var a=n(0),i=n.n(a),r=i.a.createContext({}),o=function(e){var t=i.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=o(e.components);return i.a.createElement(r.Provider,{value:t},e.children)};var c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=o(n),p=a,d=s[l+"."+p]||s[p]||b[p]||r;return n?i.a.createElement(d,Object.assign({},{ref:t},c,{components:n})):i.a.createElement(d,Object.assign({},{ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=s;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);