(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{199:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(1),r=n(9),o=(n(0),n(290)),i={title:"Defining entities"},c=[{value:"Entity file names",id:"entity-file-names",children:[]},{value:"Using BaseEntity",id:"using-baseentity",children:[]},{value:"Note about SQL drivers and @PrimaryKey",id:"note-about-sql-drivers-and-primarykey",children:[]}],p={rightToc:c},b="wrapper";function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(b,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Entities are simple javascript objects (so called POJO), decorated with ",Object(o.b)("inlineCode",{parentName:"p"},"@Entity")," decorator.\nNo real restrictions are made, you do not have to extend any base class, you are more than welcome\nto ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/entity-constructors"}),"use entity constructors"),", just do not forget to specify primary key with\n",Object(o.b)("inlineCode",{parentName:"p"},"@PrimaryKey")," decorator."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"./entities/Book.ts"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Book {\n\n  @PrimaryKey()\n  _id: ObjectID;\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n  @Property()\n  title: string;\n\n  @ManyToOne() // when you provide correct type hint, ORM will read it for you\n  author: Author;\n\n  @ManyToOne({ entity: () => Publisher }) // or you can specify the entity as class reference or string name\n  publisher: Publisher;\n\n  @ManyToMany({ entity: () => BookTag, inversedBy: 'books' })\n  tags = new Collection<BookTag>(this);\n\n  constructor(title: string, author: Author) {\n    this.title = title;\n    this.author = author;\n  }\n\n}\n\nexport interface Book extends IEntity<string> { }\n")),Object(o.b)("p",null,"You will need to extend Book's interface with ",Object(o.b)("inlineCode",{parentName:"p"},"IEntity"),". The interface represents internal\nmethods added to your entity's prototype via ",Object(o.b)("inlineCode",{parentName:"p"},"@Entity")," decorator."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"IEntity")," is generic interface, its type parameter depends on data type of normalized primary\nkey produced by used driver. SQL drivers usually use ",Object(o.b)("inlineCode",{parentName:"p"},"number")," and Mongo driver uses ",Object(o.b)("inlineCode",{parentName:"p"},"string"),".\nThis type default to union type ",Object(o.b)("inlineCode",{parentName:"p"},"number | string"),". Keep in mind that you have to worry about\nthis only when you define your primary key as ",Object(o.b)("inlineCode",{parentName:"p"},"_id")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"id"),".")),Object(o.b)("p",null,"As you can see, entity properties are decorated either with ",Object(o.b)("inlineCode",{parentName:"p"},"@Property")," decorator, or with one\nof reference decorators: ",Object(o.b)("inlineCode",{parentName:"p"},"@ManyToOne"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@OneToMany"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@OneToOne")," and ",Object(o.b)("inlineCode",{parentName:"p"},"@ManyToMany"),". "),Object(o.b)("p",null,"Here is another example of ",Object(o.b)("inlineCode",{parentName:"p"},"Author")," entity, that was referenced from the ",Object(o.b)("inlineCode",{parentName:"p"},"Book")," one:"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"./entities/Author.ts"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"@Entity()\nexport class Author {\n\n  @PrimaryKey()\n  _id: ObjectID;\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n  @Property()\n  name: string;\n\n  @Property()\n  email: string;\n\n  @Property()\n  age: number;\n\n  @Property()\n  termsAccepted = false;\n\n  @Property()\n  identities: string[];\n\n  @Property()\n  born: Date;\n\n  @OneToMany({ entity: () => Book, mappedBy: 'author' })\n  books = new Collection<Book>(this);\n\n  @ManyToOne()\n  favouriteBook: Book;\n\n  version: number;\n  versionAsString: string;\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n}\n\nexport interface Author extends IEntity { }\n")),Object(o.b)("p",null,"More information about how collections work can be found on ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/collections"}),"collections page"),"."),Object(o.b)("p",null,"If you want to define your entity in Vanilla JavaScript, take a look ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/usage-with-js"}),"here"),"."),Object(o.b)("h2",{id:"entity-file-names"},"Entity file names"),Object(o.b)("p",null,"You are free to choose one of those formats for entity filename (for a ",Object(o.b)("inlineCode",{parentName:"p"},"BookTag")," entity):"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BookTag.ts")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BookTag.model.ts")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"book-tag.ts")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"book-tag.model.ts")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"book-tag.entity.ts"))),Object(o.b)("p",null,"Entity name is inferred from the first part of file name before first dot occurs, so you can\nadd any suffix behind the dot, not just ",Object(o.b)("inlineCode",{parentName:"p"},".model.ts")," or ",Object(o.b)("inlineCode",{parentName:"p"},".entity.ts"),". "),Object(o.b)("h2",{id:"using-baseentity"},"Using BaseEntity"),Object(o.b)("p",null,"You can define your own base entity with properties that you require on all entities, like\nprimary key and created/updated time. "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"If you are initializing the ORM via ",Object(o.b)("inlineCode",{parentName:"p"},"entities")," option, you need to specify all your\nbase entities as well.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"./entities/BaseEntity.ts"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export abstract class BaseEntity {\n\n  @PrimaryKey()\n  _id: ObjectID;\n\n  @Property()\n  createdAt = new Date();\n\n  @Property({ onUpdate: () => new Date() })\n  updatedAt = new Date();\n\n}\n")),Object(o.b)("h2",{id:"note-about-sql-drivers-and-primarykey"},"Note about SQL drivers and @PrimaryKey"),Object(o.b)("p",null,"All entities described above were defined with ",Object(o.b)("inlineCode",{parentName:"p"},"_id: ObjectID")," primary key - those were Mongo\nentities. "),Object(o.b)("p",null,"For SQL drivers, you will want to define your primary key as ",Object(o.b)("inlineCode",{parentName:"p"},"id: number")," instead:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"@PrimaryKey()\nid: number;\n")),Object(o.b)("p",null,"With your entities set up, you can start ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/entity-manager"}),"using entity manager")," and\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/repositories"}),"repositories")," as described in following sections. "),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/v2/index#table-of-contents"}),"\u2190"," Back to table of contents")))}s.isMDXComponent=!0},290:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return l}));var a=n(0),r=n.n(a),o=r.a.createContext({}),i=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=i(e.components);return r.a.createElement(o.Provider,{value:t},e.children)};var p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=i(n),l=a,d=s[c+"."+l]||s[l]||b[l]||o;return n?r.a.createElement(d,Object.assign({},{ref:t},p,{components:n})):r.a.createElement(d,Object.assign({},{ref:t},p))}));function l(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);